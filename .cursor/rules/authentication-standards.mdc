---
description:
globs:
alwaysApply: false
---
# Authentication Standards

## Overview

Authentication standards and best practices for Rails applications using Devise.

<rule>
name: authentication_standards
description: Authentication standards and best practices for Rails applications
version: 1.0.0
author: Development Team
date: 2024-01-01
globs: ["app/**/*", "config/**/*", "lib/**/*", "test/**/*"]
tags:
  - authentication
  - devise
  - security
  - rails
</rule>

## 1. Devise Setup

### 1.1 Installation

Add Devise to your Gemfile:

```ruby
# Gemfile
gem 'devise'
gem 'devise-i18n'  # For internationalization
gem 'devise-security'  # For additional security features
```

Install and configure Devise:

```bash
bundle install
rails generate devise:install
rails generate devise User
rails db:migrate
```

### 1.2 Configuration

```ruby
# config/initializers/devise.rb
Devise.setup do |config|
  # ==> Mailer Configuration
  config.mailer_sender = 'please-change-me-at-config-initializers-devise@example.com'
  
  # ==> ORM configuration
  require 'devise/orm/active_record'
  
  # ==> Configuration for any authentication mechanism
  config.case_insensitive_keys = [:email]
  config.strip_whitespace_keys = [:email]
  config.skip_session_storage = [:http_auth]
  config.stretches = Rails.env.test? ? 1 : 12
  config.reconfirmable = true
  config.expire_all_remember_me_on_sign_out = true
  config.password_length = 6..128
  config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
  config.reset_password_within = 6.hours
  config.sign_out_via = :delete
  
  # ==> Navigation configuration
  config.sign_out_via = :delete
  
  # ==> Timeout configuration
  config.timeout_in = 30.minutes
end
```

## 2. User Model

### 2.1 Basic User Model

```ruby
# app/models/user.rb
class User < ApplicationRecord
  devise :database_authenticatable, :registerable,
         :recoverable, :rememberable, :validatable,
         :confirmable, :lockable, :trackable, :timeoutable

  # Add role-based authorization
  enum role: { user: 0, moderator: 1, admin: 2 }
  
  # Validations
  validates :email, presence: true, uniqueness: true
  validates :role, presence: true
  
  # Associations
  has_many :posts, dependent: :destroy
  has_many :comments, dependent: :destroy
  
  # Scopes
  scope :active, -> { where(confirmed_at: !nil) }
  scope :admins, -> { where(role: :admin) }
  
  # Methods
  def admin?
    role == 'admin'
  end
  
  def moderator?
    role == 'moderator' || admin?
  end
end
```

### 2.2 Migration

```ruby
# db/migrate/xxx_create_users.rb
class CreateUsers < ActiveRecord::Migration[7.0]
  def change
    create_table :users do |t|
      ## Database authenticatable
      t.string :email,              null: false, default: ""
      t.string :encrypted_password, null: false, default: ""

      ## Recoverable
      t.string   :reset_password_token
      t.datetime :reset_password_sent_at

      ## Rememberable
      t.datetime :remember_created_at

      ## Trackable
      t.integer  :sign_in_count, default: 0, null: false
      t.datetime :current_sign_in_at
      t.datetime :last_sign_in_at
      t.string   :current_sign_in_ip
      t.string   :last_sign_in_ip

      ## Confirmable
      t.string   :confirmation_token
      t.datetime :confirmed_at
      t.datetime :confirmation_sent_at
      t.string   :unconfirmed_email

      ## Lockable
      t.integer  :failed_attempts, default: 0, null: false
      t.string   :unlock_token
      t.datetime :locked_at

      ## Role
      t.integer :role, default: 0

      t.timestamps null: false
    end

    add_index :users, :email,                unique: true
    add_index :users, :reset_password_token, unique: true
    add_index :users, :confirmation_token,   unique: true
    add_index :users, :unlock_token,         unique: true
  end
end
```

## 3. Controllers

### 3.1 Application Controller

```ruby
# app/controllers/application_controller.rb
class ApplicationController < ActionController::Base
  before_action :authenticate_user!
  before_action :configure_permitted_parameters, if: :devise_controller?

  protected

  def configure_permitted_parameters
    devise_parameter_sanitizer.permit(:sign_up, keys: [:name, :role])
    devise_parameter_sanitizer.permit(:account_update, keys: [:name])
  end

  def require_admin
    unless current_user&.admin?
      redirect_to root_path, alert: 'Access denied. Admin privileges required.'
    end
  end

  def require_moderator
    unless current_user&.moderator?
      redirect_to root_path, alert: 'Access denied. Moderator privileges required.'
    end
  end
end
```

### 3.2 Custom Sessions Controller

```ruby
# app/controllers/users/sessions_controller.rb
class Users::SessionsController < Devise::SessionsController
  before_action :configure_sign_in_params, only: [:create]

  protected

  def configure_sign_in_params
    devise_parameter_sanitizer.permit(:sign_in, keys: [:attribute])
  end

  def after_sign_in_path_for(resource)
    if resource.admin?
      admin_dashboard_path
    elsif resource.moderator?
      moderator_dashboard_path
    else
      dashboard_path
    end
  end

  def after_sign_out_path_for(resource_or_scope)
    root_path
  end
end
```

### 3.3 Custom Registrations Controller

```ruby
# app/controllers/users/registrations_controller.rb
class Users::RegistrationsController < Devise::RegistrationsController
  before_action :configure_sign_up_params, only: [:create]
  before_action :configure_account_update_params, only: [:update]

  protected

  def configure_sign_up_params
    devise_parameter_sanitizer.permit(:sign_up, keys: [:name, :role])
  end

  def configure_account_update_params
    devise_parameter_sanitizer.permit(:account_update, keys: [:name])
  end

  def after_sign_up_path_for(resource)
    if resource.confirmed?
      dashboard_path
    else
      new_user_confirmation_path
    end
  end
end
```

## 4. Routes

### 4.1 Route Configuration

```ruby
# config/routes.rb
Rails.application.routes.draw do
  devise_for :users, controllers: {
    sessions: 'users/sessions',
    registrations: 'users/registrations',
    confirmations: 'users/confirmations',
    passwords: 'users/passwords'
  }

  # Protected routes
  authenticate :user do
    resources :posts
    resources :comments
    get 'dashboard', to: 'dashboard#index'
  end

  # Admin routes
  authenticate :user, lambda { |u| u.admin? } do
    namespace :admin do
      resources :users
      resources :posts
      get 'dashboard', to: 'dashboard#index'
    end
  end

  # Moderator routes
  authenticate :user, lambda { |u| u.moderator? } do
    namespace :moderator do
      resources :posts, only: [:index, :show, :update]
      get 'dashboard', to: 'dashboard#index'
    end
  end

  root 'home#index'
end
```

## 5. Views

### 5.1 Login Form

```erb
<!-- app/views/devise/sessions/new.html.erb -->
<div class="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
  <div class="max-w-md w-full space-y-8">
    <div>
      <h2 class="mt-6 text-center text-3xl font-extrabold text-gray-900">
        Sign in to your account
      </h2>
    </div>
    
    <%= form_for(resource, as: resource_name, url: session_path(resource_name), html: { class: "mt-8 space-y-6" }) do |f| %>
      <div class="rounded-md shadow-sm -space-y-px">
        <div>
          <%= f.label :email, class: "sr-only" %>
          <%= f.email_field :email, autocomplete: "email", required: true, 
              class: "appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm",
              placeholder: "Email address" %>
        </div>
        <div>
          <%= f.label :password, class: "sr-only" %>
          <%= f.password_field :password, autocomplete: "current-password", required: true,
              class: "appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-b-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm",
              placeholder: "Password" %>
        </div>
      </div>

      <% if devise_mapping.rememberable? %>
        <div class="flex items-center justify-between">
          <div class="flex items-center">
            <%= f.check_box :remember_me, class: "h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded" %>
            <%= f.label :remember_me, class: "ml-2 block text-sm text-gray-900" %>
          </div>

          <div class="text-sm">
            <%= link_to "Forgot your password?", new_password_path(resource_name), class: "font-medium text-indigo-600 hover:text-indigo-500" %>
          </div>
        </div>
      <% end %>

      <div>
        <%= f.submit "Sign in", class: "group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500" %>
      </div>
    <% end %>
  </div>
</div>
```

### 5.2 Registration Form

```erb
<!-- app/views/devise/registrations/new.html.erb -->
<div class="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
  <div class="max-w-md w-full space-y-8">
    <div>
      <h2 class="mt-6 text-center text-3xl font-extrabold text-gray-900">
        Create your account
      </h2>
    </div>
    
    <%= form_for(resource, as: resource_name, url: registration_path(resource_name), html: { class: "mt-8 space-y-6" }) do |f| %>
      <%= render "devise/shared/error_messages", resource: resource %>
      
      <div class="rounded-md shadow-sm -space-y-px">
        <div>
          <%= f.label :email, class: "sr-only" %>
          <%= f.email_field :email, autocomplete: "email", required: true,
              class: "appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm",
              placeholder: "Email address" %>
        </div>
        <div>
          <%= f.label :password, class: "sr-only" %>
          <%= f.password_field :password, autocomplete: "new-password", required: true,
              class: "appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm",
              placeholder: "Password" %>
        </div>
        <div>
          <%= f.label :password_confirmation, class: "sr-only" %>
          <%= f.password_field :password_confirmation, autocomplete: "new-password", required: true,
              class: "appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-b-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm",
              placeholder: "Confirm password" %>
        </div>
      </div>

      <div>
        <%= f.submit "Sign up", class: "group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500" %>
      </div>
    <% end %>
  </div>
</div>
```

## 6. JavaScript Integration

### 6.1 Authentication State

```javascript
// app/javascript/controllers/auth_controller.js
import { Controller } from "@hotwired/stimulus"

export default class extends Controller {
  static targets = ["userMenu", "loginButton", "logoutButton"]

  connect() {
    this.checkAuthState()
  }

  checkAuthState() {
    // Check if user is authenticated via meta tag or data attribute
    const isAuthenticated = document.querySelector('meta[name="user-authenticated"]')?.content === 'true'
    
    if (isAuthenticated) {
      this.showUserMenu()
    } else {
      this.showLoginButton()
    }
  }

  showUserMenu() {
    if (this.hasUserMenuTarget) {
      this.userMenuTarget.classList.remove('hidden')
    }
    if (this.hasLoginButtonTarget) {
      this.loginButtonTarget.classList.add('hidden')
    }
  }

  showLoginButton() {
    if (this.hasUserMenuTarget) {
      this.userMenuTarget.classList.add('hidden')
    }
    if (this.hasLoginButtonTarget) {
      this.loginButtonTarget.classList.remove('hidden')
    }
  }

  logout(event) {
    event.preventDefault()
    
    if (confirm('Are you sure you want to sign out?')) {
      const form = document.createElement('form')
      form.method = 'DELETE'
      form.action = '/users/sign_out'
      document.body.appendChild(form)
      form.submit()
    }
  }
}
```

### 6.2 CSRF Protection

```javascript
// app/javascript/utils/csrf.js
export function getCSRFToken() {
  return document.querySelector('meta[name="csrf-token"]')?.getAttribute('content')
}

export function setupCSRF() {
  const token = getCSRFToken()
  
  if (token) {
    // Set default headers for fetch requests
    const originalFetch = window.fetch
    window.fetch = function(url, options = {}) {
      options.headers = {
        'X-CSRF-Token': token,
        'Content-Type': 'application/json',
        ...options.headers
      }
      return originalFetch(url, options)
    }
  }
}
```

## 7. Security Best Practices

### 7.1 Environment Variables

```bash
# .env
SECRET_KEY_BASE=your_secret_key_base
DEVISE_SECRET_KEY=your_devise_secret_key
SMTP_HOST=smtp.example.com
SMTP_PORT=587
SMTP_USERNAME=your_email@example.com
SMTP_PASSWORD=your_email_password
```

### 7.2 Token Management

- Use secure session storage
- Implement proper token cleanup
- Set appropriate session timeouts
- Use HTTPS in production

### 7.3 Input Validation

```ruby
# app/models/user.rb
class User < ApplicationRecord
  devise :database_authenticatable, :registerable,
         :recoverable, :rememberable, :validatable

  validates :email, presence: true, 
            uniqueness: { case_sensitive: false },
            format: { with: URI::MailTo::EMAIL_REGEXP }
  validates :password, length: { minimum: 8 }, 
            if: -> { new_record? || !password.nil? }
  validates :password_confirmation, presence: true, 
            if: -> { new_record? || !password.nil? }
  
  validate :password_complexity, if: -> { new_record? || !password.nil? }
  
  private
  
  def password_complexity
    return if password.blank?
    
    unless password.match?(/\A(?=.*[a-z])(?=.*[A-Z])(?=.*\d)/)
      errors.add :password, 'must include at least one lowercase letter, one uppercase letter, and one digit'
    end
  end
end
```

## 8. Testing Authentication

### 8.1 Test Setup

```ruby
# spec/rails_helper.rb
RSpec.configure do |config|
  config.include Devise::Test::ControllerHelpers, type: :controller
  config.include Devise::Test::IntegrationHelpers, type: :request
  config.include Devise::Test::IntegrationHelpers, type: :system
end
```

### 8.2 Controller Tests

```ruby
# spec/controllers/posts_controller_spec.rb
require 'rails_helper'

RSpec.describe PostsController, type: :controller do
  let(:user) { create(:user) }
  let(:admin) { create(:user, :admin) }

  describe 'GET #index' do
    context 'when user is authenticated' do
      before { sign_in user }

      it 'returns http success' do
        get :index
        expect(response).to have_http_status(:success)
      end
    end

    context 'when user is not authenticated' do
      it 'redirects to sign in' do
        get :index
        expect(response).to redirect_to(new_user_session_path)
      end
    end
  end

  describe 'POST #create' do
    context 'when user is admin' do
      before { sign_in admin }

      it 'creates a new post' do
        expect {
          post :create, params: { post: { title: 'Test', content: 'Content' } }
        }.to change(Post, :count).by(1)
      end
    end
  end
end
```

### 8.3 System Tests

```ruby
# spec/system/authentication_spec.rb
require 'rails_helper'

RSpec.describe 'Authentication', type: :system do
  let(:user) { create(:user) }

  it 'allows user to sign in' do
    visit new_user_session_path
    
    fill_in 'Email', with: user.email
    fill_in 'Password', with: user.password
    click_button 'Sign in'
    
    expect(page).to have_content('Signed in successfully')
  end

  it 'prevents access to protected pages when not signed in' do
    visit dashboard_path
    
    expect(page).to have_content('You need to sign in or sign up before continuing')
  end
end
```

## 9. Monitoring and Logging

### 9.1 Auth Events

```ruby
# app/models/user.rb
class User < ApplicationRecord
  devise :database_authenticatable, :registerable,
         :recoverable, :rememberable, :validatable,
         :trackable

  after_create :log_user_creation
  after_update :log_user_update, if: :saved_change_to_role?

  private

  def log_user_creation
    Rails.logger.info "User created: #{email} with role: #{role}"
  end

  def log_user_update
    Rails.logger.info "User role updated: #{email} from #{role_previous_change[0]} to #{role}"
  end
end
```

### 9.2 Security Monitoring

- Monitor failed login attempts
- Track suspicious activity
- Log authentication events
- Monitor session duration
- Track role changes

## 10. Additional Security Features

### 10.1 Two-Factor Authentication

```ruby
# Add to Gemfile
gem 'devise-two-factor'

# Add to User model
class User < ApplicationRecord
  devise :two_factor_authenticatable,
         :two_factor_backupable,
         otp_secret_encryption_key: Rails.application.credentials.otp_key
end
```

### 10.2 Account Locking

```ruby
# config/initializers/devise.rb
config.maximum_attempts = 5
config.unlock_strategy = :both
config.unlock_in = 1.hour
```

### 10.3 Password Expiration

```ruby
# app/models/user.rb
class User < ApplicationRecord
  validate :password_not_expired

  private

  def password_not_expired
    return unless password_changed_at
    return unless password_changed_at < 90.days.ago
    
    errors.add(:password, 'has expired. Please change your password.')
  end
end
```
